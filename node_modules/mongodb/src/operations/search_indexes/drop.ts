import type { Document } from 'bson';

import type { Collection } from '../../collection';
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> 84c787a2e896c0e7a46e04aae83d200a1242e9bc
import type { Server } from '../../sdam/server';
import type { ClientSession } from '../../sessions';
import type { Callback } from '../../utils';
import { AbstractCallbackOperation } from '../operation';

/** @internal */
export class DropSearchIndexOperation extends AbstractCallbackOperation<void> {
<<<<<<< HEAD
=======
=======
import { MONGODB_ERROR_CODES, MongoServerError } from '../../error';
import type { Server } from '../../sdam/server';
import type { ClientSession } from '../../sessions';
import { AbstractOperation } from '../operation';

/** @internal */
export class DropSearchIndexOperation extends AbstractOperation<void> {
>>>>>>> 606e41d43ceed91f179614d13298418977dd016f
>>>>>>> 84c787a2e896c0e7a46e04aae83d200a1242e9bc
  constructor(private readonly collection: Collection, private readonly name: string) {
    super();
  }

<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> 84c787a2e896c0e7a46e04aae83d200a1242e9bc
  executeCallback(
    server: Server,
    session: ClientSession | undefined,
    callback: Callback<void>
  ): void {
<<<<<<< HEAD
=======
=======
  override async execute(server: Server, session: ClientSession | undefined): Promise<void> {
>>>>>>> 606e41d43ceed91f179614d13298418977dd016f
>>>>>>> 84c787a2e896c0e7a46e04aae83d200a1242e9bc
    const namespace = this.collection.fullNamespace;

    const command: Document = {
      dropSearchIndex: namespace.collection
    };

    if (typeof this.name === 'string') {
      command.name = this.name;
    }

<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> 84c787a2e896c0e7a46e04aae83d200a1242e9bc
    server.command(namespace, command, { session }, err => {
      if (err) {
        callback(err);
        return;
      }

      callback();
    });
<<<<<<< HEAD
=======
=======
    try {
      await server.commandAsync(namespace, command, { session });
    } catch (error) {
      const isNamespaceNotFoundError =
        error instanceof MongoServerError && error.code === MONGODB_ERROR_CODES.NamespaceNotFound;
      if (!isNamespaceNotFoundError) {
        throw error;
      }
    }
>>>>>>> 606e41d43ceed91f179614d13298418977dd016f
>>>>>>> 84c787a2e896c0e7a46e04aae83d200a1242e9bc
  }
}
