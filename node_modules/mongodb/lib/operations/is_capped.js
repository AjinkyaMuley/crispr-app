"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsCappedOperation = void 0;
const error_1 = require("../error");
const operation_1 = require("./operation");
/** @internal */
<<<<<<< HEAD
class IsCappedOperation extends operation_1.AbstractCallbackOperation {
=======
<<<<<<< HEAD
class IsCappedOperation extends operation_1.AbstractCallbackOperation {
=======
class IsCappedOperation extends operation_1.AbstractOperation {
>>>>>>> 606e41d43ceed91f179614d13298418977dd016f
>>>>>>> 84c787a2e896c0e7a46e04aae83d200a1242e9bc
    constructor(collection, options) {
        super(options);
        this.options = options;
        this.collection = collection;
    }
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> 84c787a2e896c0e7a46e04aae83d200a1242e9bc
    executeCallback(server, session, callback) {
        const coll = this.collection;
        coll.s.db
            .listCollections({ name: coll.collectionName }, { ...this.options, nameOnly: false, readPreference: this.readPreference, session })
            .toArray()
            .then(collections => {
            if (collections.length === 0) {
                // TODO(NODE-3485)
                return callback(new error_1.MongoAPIError(`collection ${coll.namespace} not found`));
            }
            callback(undefined, !!collections[0].options?.capped);
        }, error => callback(error));
<<<<<<< HEAD
=======
=======
    async execute(server, session) {
        const coll = this.collection;
        const [collection] = await coll.s.db
            .listCollections({ name: coll.collectionName }, { ...this.options, nameOnly: false, readPreference: this.readPreference, session })
            .toArray();
        if (collection == null || collection.options == null) {
            throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);
        }
        return !!collection.options?.capped;
>>>>>>> 606e41d43ceed91f179614d13298418977dd016f
>>>>>>> 84c787a2e896c0e7a46e04aae83d200a1242e9bc
    }
}
exports.IsCappedOperation = IsCappedOperation;
//# sourceMappingURL=is_capped.js.map